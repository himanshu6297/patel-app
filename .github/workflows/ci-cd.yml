name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Checkout code
    - name: Checkout
      uses: actions/checkout@v4

    # Set up Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Log in to AWS ECR
    - name: Log in to AWS ECR
      uses: aws-actions/amazon-ecr-login@v2
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ca-central-1

    # Build and push Docker image
    - name: Build and push Docker image
      env:
        ECR_REGISTRY: 761018886060.dkr.ecr.ca-central-1.amazonaws.com
        ECR_REPOSITORY: patel-app
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    # Register task definition
    - name: Register task definition
      id: register-task
      run: |
        TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://$GITHUB_WORKSPACE/task-definition.json --region ca-central-1 --query 'taskDefinition.taskDefinitionArn' --output text)
        if [ -z "$TASK_DEF_ARN" ]; then
          echo "Error: Failed to register task definition"
          cat $GITHUB_WORKSPACE/task-definition.json
          exit 1
        fi
        echo "Task Definition ARN: $TASK_DEF_ARN"
        echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ca-central-1

    # Create ECS service if not exists
    - name: Create ECS service if not exists
      run: |
        SERVICE_EXISTS=$(aws ecs describe-services --cluster patel-cluster --services patel-app-service --region ca-central-1 --query 'services[0].status' --output text 2>/dev/null || echo "NOT_FOUND")
        if [ "$SERVICE_EXISTS" != "ACTIVE" ]; then
          echo "Service patel-app-service does not exist, creating it..."
          aws ecs create-service \
            --cluster patel-cluster \
            --service-name patel-app-service \
            --task-definition "$TASK_DEF_ARN" \
            --desired-count 2 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-08d6326d6926f6872,subnet-0b47b5dda80581e0d],securityGroups=[sg-0d1f474fde0e6943b],assignPublicIp=DISABLED}" \
            --load-balancers "targetGroupArn=arn:aws:elasticloadbalancing:ca-central-1:761018886060:targetgroup/Final-Patel-CUP2C5OG5XJV/de6385955c886e9c,containerName=patel-container,containerPort=5000" \
            --region ca-central-1
        else
          echo "Service patel-app-service already exists, proceeding with deployment..."
        fi
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ca-central-1

    # Deploy to ECS
    - name: Deploy to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: task-definition.json
        service: patel-app-service
        cluster: patel-cluster
        wait-for-service-stability: true
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ca-central-1
